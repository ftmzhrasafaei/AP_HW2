#include "Map.h"
#include <iostream>
#include <ctime>
#include <vector>

//cunstractor

Map:: Map(int N,int** Arr,int** Arr2)
{
  n = N;
  arr = Arr;
  arr2 = Arr2;
  std::cout<<" we got the size and the operation is starting now!"<<std::endl;
  std::cout<<"     >~^_______^~<         "<<std::endl; 
}
  

//distractor
Map:: ~Map()
{
  
  std::cout<<"ok , bye!"<<std::endl;  
}

//display crookie
void Map::showRoute()
{
  for( int t{} ; t < n ; t++)
    {
      for( int l{}; l < n ; l++)
	{
	  if (arr2[l][t] == 1)
	    std::cout<<" "<< "*";
	  else
	    std::cout<<" "<<"-";
	  
	  
	}
      std::cout<<std::endl;
    }
  
}


// returns absolute magnitude
int Map::sign(int k)
{
  if(k>=0)
    return k;
  else
    return k*(-1);
}

//finding way
void Map::findRoute()
  
{
  // std::cout<<"hi! the is findRoute"<<std::endl;
  int i{} , j{} ;
  int dis{} , k{};
  //  std::cout<<"defining value"<<std::endl;
  for( int q{} ; q < n ; q++)
    {
      for( int w{} ; w < n ; w++)
	{
	  arr2[w][q] = 0;
	}
    }
  //  std::cout<<"chaning arr2 1"<<std::endl;
  arr2[0][0] = 1;
  //  std::cout<<"chaning arr2"<<std::endl;
  srand((int)time(0));
  //    std::cout<<"srand func"<<std::endl;

  //using rand function for giving random numbers
  for( int l{} ; l < n ; l++)
    {
      for( int t{}; t < n ; t++)
	{
	  int r = (rand() % 100) + 1;
	  arr[t][l] = r;
	  // std::cout<<"get the rand num"<<std::endl;
	}
    }

  //finding route whith this while
  std::cout<<"=====Part C====="<<std::endl;
  while(j < n - 1 || i < n - 1 )
    {
      if (j == n - 1 )
	{
	  arr2[i + 1][j] = 1;
	  dis = dis + sign(arr[i + 1][j] - arr[i][j]);
	  i++;
	}
      else if(i == n - 1 )
	{
	  arr2[i][j + 1] =1 ;
	  dis = dis + sign(arr[i][j + 1] - arr[i][j]);
	  j++;
	}
      else
	{
	  if(arr[i + 1][j] <= arr[i][j + 1])
	    {
	      if(arr[i + 1][j] <= arr[i + 1][j + 1])
		{
		  dis = dis + sign(arr[i + 1][j] - arr[i][j]);
		  
		  arr2[i + 1][j] = 1;
		  j--;
		}
	      else
		{
		  dis = dis + sign(arr[i + 1][j + 1] - arr[i][j]);
		  
		  arr2[i + 1][j + 1] = 1;
		
		}
	      
	    }
	  else
	    {
	      if(arr[i][j + 1] <= arr[i + 1][j + 1])
		{
	  
		  dis = dis + sign(arr[i][j + 1] - arr[i][j]);
	 

		  arr2[i][j + 1] = 1;
		  i--;
		}
	      else
		{
		  dis = dis + sign(arr[i + 1][j + 1] - arr[i][j]);	 

		  arr2[i + 1][j + 1] = 1;
		  
		}
	    }

 

	  j++;
	  i++;
     
	}
      k++;
      std::cout<<"The distance traveled until "<<k<<"th level :"<<dis<<std::endl;
    }
  std::cout<<std::endl;
  std::cout<<"Total distance traveled is : "<<dis<<std::endl;
  std::cout<<" I take my hat off to you ,ali!  *___*"<<std::endl;
  std::cout<<std::endl;
  showMap();
  showRoute();

  dis = 0;
  i = 0;
  j = 0;
  k = 0;
  for(int l;l < n;l++)
    for(int u;u < n;u++)
      arr2[l][u] = 0;
  
  arr2[0][0] = 1;
  
  std::cout<<"=====Part A====="<<std::endl;
				 
   while(j < n - 1 && i < n - 1 )
    {
      if (j == n - 1 )
	{
	  arr2[i + 1][j] = 1;
	  dis = dis + sign(arr[i + 1][j] - arr[i][j]);
	  i++;
	}
      else if(i == n - 1 )
	{
	  arr2[i][j + 1] = 1;
	  dis = dis + sign(arr[i][j + 1] - arr[i][j]);
	  j++;
	}
      else
      {
	  if(arr[i + 1][j] <= arr[i][j + 1])
	    {
	      dis = dis + sign(arr[i + 1][j] - arr[i][j]);
	     
	      arr2[i + 1][j] = 1;
	      j--;
	    }
	  
	  else
	    {
	  
	      dis = dis + sign(arr[i][j + 1] - arr[i][j]);
	 

	      arr2[i][j + 1] = 1;
	      i--;
	      
	    }

 

	  j++;
	  i++;
     	  }
      k++;
      std::cout<<"The distance traveled until "<<k<<"th level :"<<dis<<std::endl;
    }
  std::cout<<std::endl;
  std::cout<<"Total distance traveled is : "<<dis<<std::endl;
  std::cout<<" I take my hat off to you ,ali!  *___*"<<std::endl;
  std::cout<<std::endl;
  showMap();
  showRoute();
  
}


//display hight of points
void Map::showMap()
{
  
  for( int l{} ; l < n ; l++)
    {
      for( int t{}; t < n ; t++)
	{
	  if (arr[t][l] < 10)
	    std::cout<<" "<<arr[t][l]<<"  ";
	  else if(arr[t][l] == 100)
	    std::cout<<" "<<arr[t][l];
	  else
	    std::cout<<" "<<arr[t][l]<<" ";


	}
      std::cout<<std::endl;
    }
}


